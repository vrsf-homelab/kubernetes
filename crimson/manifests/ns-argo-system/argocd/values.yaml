global:
  domain: argocd.vrsf.in
  revisionHistoryLimit: 10

  image:
    repository: vertisan/argocd
    tag: 0.3.0

  logging:
    format: json

  deploymentStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists

crds:
  install: true
  keep: false

configs:
  secret:
    createSecret: false

  cm:
    kustomize.buildOptions: "--enable-helm --enable-alpha-plugins --enable-exec"
    users.anonymous.enabled: "false"
    helm.valuesFileSchemes: >-
      secrets+gpg-import, secrets+gpg-import-kubernetes,
      secrets+age-import, secrets+age-import-kubernetes,
      secrets,secrets+literal,
      http,https
    oidc.config: |
      name: VRSF Auth
      issuer: https://auth.vrsf.in
      clientID: $oidc.clientId
      clientSecret: $oidc.clientSecret
      requestedScopes:
        - openid
        - profile
        - email
        - groups
      logoutURL: https://auth.vrsf.in/oidc/v1/end_session
    # dex.config: |
    #   connectors:
    #   - type: oidc
    #     id: authentik
    #     name: VRS-Factory
    #     config:
    #       issuer: https://auth.vrsf.in/application/o/argocd/
    #       clientID: $dex.authentik.clientId
    #       clientSecret: $dex.authentik.clientSecret
    #       insecureEnableGroups: true
    #       scopes:
    #         - openid
    #         - profile
    #         - email

  rbac:
    policy.csv: |
      p, role:guest, applications, list, *, allow
      p, role:guest, applications, get, *, allow
      g, argocd_admin, role:admin
      g, argocd_viewer, role:readonly
      g, argocd_guest, role:guest

controller:
  resources:
    requests:
      cpu: 100m
      memory: 768Mi
    limits:
      cpu: 300m
      memory: 2Gi
  pdb:
    maxUnavailable: 50%
  metrics: &metricsMonitor
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: prometheus

dex:
  enabled: true
  metrics: *metricsMonitor

  pdb:
    enabled: true
    maxUnavailable: 50%

repoServer:
  metrics: *metricsMonitor
  envFrom:
    - secretRef:
        name: aws-credentials

server:
  metrics: *metricsMonitor
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    tls: true
  pdb:
    enabled: true
    maxUnavailable: 50%

redis:
  metrics: *metricsMonitor

applicationSet:
  metrics: *metricsMonitor
