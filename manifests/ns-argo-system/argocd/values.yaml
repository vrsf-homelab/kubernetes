global:
  domain: argocd.vrsf.in
  revisionHistoryLimit: 10

  image:
    repository: vertisan/argocd
    tag: 0.2.0

  logging:
    format: json

  deploymentStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists

crds:
  install: true
  keep: false

configs:
  secret:
    createSecret: false

  cm:
    kustomize.buildOptions: "--enable-helm --enable-alpha-plugins --enable-exec"
    users.anonymous.enabled: "false"
    helm.valuesFileSchemes: >-
      secrets+gpg-import, secrets+gpg-import-kubernetes,
      secrets+age-import, secrets+age-import-kubernetes,
      secrets,secrets+literal,
      http,https
    dex.config: |
      connectors:
      - type: ldap
        name: LDAP
        id: ldap
        config:
          host: "ldap.vrsf.in"
          insecureNoSSL: true
          insecureSkipVerify: true
          bindDN: "$dex.ldap.bindDN"
          bindPW: "$dex.ldap.bindPW"
          usernamePrompt: Username
          userSearch:
            baseDN: "cn=users,dc=ldap,dc=vrsf,dc=in"
            filter: "(|(memberOf=cn=argocd,cn=groups,dc=ldap,dc=vrsf,dc=in)(memberOf=cn=homelab-guest,cn=groups,dc=ldap,dc=vrsf,dc=in))"
            username: uid
            idAttr: uid
            emailAttr: mail
            nameAttr: displayName
          groupSearch:
            baseDN: "cn=groups,dc=ldap,dc=vrsf,dc=in"
            filter: ""
            userMatchers:
              - userAttr: uid
                groupAttr: memberUid
            nameAttr: cn

  rbac:
    policy.csv: |
      p, role:guest, applications, list, *, allow
      p, role:guest, applications, get, *, allow

      g, argocd, role:admin
      g, homelab-guest, role:guest

controller:
  resources:
    requests:
      cpu: 500m
      memory: 768Mi
    limits:
      cpu: 1500m
      memory: 2Gi
  pdb:
    maxUnavailable: 50%
  metrics: &metricsMonitor
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: prometheus

dex:
  enabled: true
  metrics: *metricsMonitor

  pdb:
    enabled: true
    maxUnavailable: 50%

repoServer:
  metrics: *metricsMonitor
  envFrom:
    - secretRef:
        name: aws-credentials

server:
  metrics: *metricsMonitor
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    tls: true
  pdb:
    enabled: true
    maxUnavailable: 50%

redis:
  metrics: *metricsMonitor

applicationSet:
  metrics: *metricsMonitor
